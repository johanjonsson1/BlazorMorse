@using BlazorMorse.Domain
@inject IJSRuntime JSRuntime

<div>
    @if (!Hidden)
    {
        <div class="centered">
            <label>
                <input @bind="InputText" @onkeyup="MaybeSend" @onclick="Clear"/><span class="fas fa-arrow-alt-circle-right send-button" @onclick="Send"></span>
            </label>
        </div>
    }

    <div class="braille-content @(Moved ? "output" : "")">
        @foreach (var character in Output)
        {
            if (character is WhitespaceIndicator)
            {
                @Space
                continue;
            }
            <BrailleSymbol Symbol="character"/>
        }
    </div>
</div>

@code {
    private string InputText { get; set; }
    private List<IBrailleCharacter> Output { get; set; } = new();
    private MarkupString Space = new MarkupString("<span style=\"width: 20px; display: inline-block\"></span>");
    private const int ShortDelay = 100;
    private bool Hidden = false;
    private bool Moved = false;

    private void Clear()
    {
        InputText = string.Empty;
    }

    private async Task MaybeSend(KeyboardEventArgs args)
    {
        if(args.Key == "Enter")
        {
            await Send();
        }
    }

    private async Task Send()
    {
        Hidden = true;
        Moved = false;
        Output.Clear();


        var result = InputText.ToBraille();

        foreach (var symbol in result)
        {
            Output.Add(symbol);
            this.StateHasChanged();
            await Task.Delay(ShortDelay);
        }

        await Task.Delay(2000);
        Hidden = false;
        Moved = true;
        this.StateHasChanged();
    }
}